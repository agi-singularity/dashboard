# -*- coding: utf-8 -*-
"""xml.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ODL5iEsbOJ6qNb0IwYjXi26-Fzzss-l
"""

import xml.etree.ElementTree as ET
tree = ET.parse('country_data.xml')
root = tree.getroot()

root[0].attrib

root[0].tail

root.tag

root.attrib

for child in root:
  print(child.tag, child.attrib)
  for grandchild in child:
    print(grandchild.tag, grandchild.attrib, grandchild.text)

parser = ET.XMLPullParser(['start', 'end'])
parser.feed('<mytag>sometext')
list(parser.read_events())

parser.feed(' more text</mytag>')
for event, elem in parser.read_events():
    print(event)
    print(elem.tag, 'text=', elem.text)

for neighbor in root.iter('neighbor'):
    print(neighbor.attrib)

for year in root.iter('year'):
  print(year.text)

"""IMAGES"""

import xml.etree.ElementTree as ET
treex = ET.parse('alz_p3031.svg')
rootx = treex.getroot()

rootx

treex.getroot()

count = 0
for child in rootx:
  print(count, ': ', child.attrib)
  for grandchild in child:
    #print(grandchild.attrib)
    grandchild.attrib['class'] = 'color'
    if(count % 2 == 0):
      grandchild.attrib['style'] = "fill:blue"
    else:
      grandchild.attrib['style'] = "fill:green"
    print(grandchild.attrib)
    count += 1

treex.write('output_blue_green.xml')

#style="fill:rgb(0,0,255)"
rootx[1][0].attrib['class'] = 'color'
rootx[1][0].attrib['style'] = 'fill:rgb(0,0,255)'
treex.write('output2.xml')

rootx[1][0].attrib

rootx[2][0].attrib
rootx[2][0].attrib['class'] = 'color'
rootx[2][0].attrib['style'] = "fill:#ff0000;stroke:blue"
treex.write('output3.xml')

for child in rootx:
  print(child.tag, child.attrib)
  for grandchild in child:
    print(grandchild.tag, grandchild.attrib, grandchild.text)

!pip install cairosv

def render_svg(_svg, _scale):
    _svg = cairosvg.svg2svg(_svg, dpi = (DPI / _scale))
    _bytes = cairosvg.svg2png(_svg)
    byte_io = io.BytesIO(_bytes)
    return pygame.image.load(byte_io)

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np

img=mpimg.imread('ins_p0203.svg')
img

!pip install svgwrite

import svgwrite

dwg = svgwrite.Drawing('ins_0203.svg', profile='tiny')
# dwg.add(dwg.line((0, 0), (10, 0), stroke=svgwrite.rgb(10, 10, 16, '%')))
# dwg.add(dwg.text('Test', insert=(0, 0.2), fill='red'))
# dwg.save()
dwg

dwg.viewbox()

!pip install svglib

from svglib.svglib import svg2rlg
from reportlab.graphics import renderPDF, renderPM

drawing = svg2rlg("ins_p0203.svg")
renderPDF.drawToFile(drawing, "file.pdf")
renderPM.drawToFile(drawing, "file.png")

drawing.getContents

# Imports PIL module
from PIL import Image

# open method used to open different extension image file
im = Image.open(r"ins_p0203.svg")

# This method will show image in any image viewer
im.show()

import xml.etree.ElementTree as ET
treex = ET.parse('alz_p0405.svg')
rootx = treex.getroot()

count = 0
for child in rootx:
  print(count, ': ', child.attrib)
  for grandchild in child:
    #print(grandchild.attrib)
    grandchild.attrib['class'] = 'color'
    if(count % 2 == 0):
      grandchild.attrib['style'] = "fill:blue"
    else:
      grandchild.attrib['style'] = "fill:green"
    print(grandchild.attrib)
    count += 1

treex.write('alz0405_blue_green.xml')

from google.colab import drive
drive.mount('/content/drive')

"""KIBEAM WAND ACTIVITIES"""

import pandas as pd
actions = pd.read_csv('action_inference.csv')
actions

df = actions.fillna(0)

actions.loc[actions['action']=='activity_inference'][['activity_id', 'Wand Count']].groupby(by=['activity_id']).sum() # & actions['activity_id'].str.contains("ALZ")]

df['Wand Count'].sum()

idf = actions.loc[actions['action']=='activity_inference'][['action_data', 'Wand Count']].groupby(by=['action_data']).sum() # & actions['activity_id'].str.contains("ALZ")]
#idf.iloc[:500]
#idf[idf['action_data']] #.str.contains('alz')]
#idf.filter(index.str.contains('alz'))
alz = idf.filter(like='alz', axis=0)
alz

alz.sort_values(by='Wand Count', ascending=False)

alz.filter(regex='^((?!one).)*$', axis=0)

# @title Wand Count
import numpy as np
from matplotlib import pyplot as plt

alz['Wand Count'].plot(kind='line', figsize=(15, 8), title='Wand Count')
#plt.gca().spines[['top', 'right']].set_visible(True)
plt.xticks(np.arange(0, 600, step=1))
plt.xticks(color='brown', rotation=90, fontweight='bold', fontsize='6', horizontalalignment='right')

# @title Wand Count

from matplotlib import pyplot as plt
alz['Wand Count'].plot(kind='hist', bins=20, title='Wand Count')
plt.gca().spines[['top', 'right',]].set_visible(False)

x = 'alz_p0405_txt_w01_aliens'
alz.filter(like=x, axis=0)['Wand Count'].values[0]

y = "alz_c1_one"
for value in alz.index.values:
  if x in value:
    print(x in value)

#red: #990000	#cc0000	#ff0000
#yellow: #999900	#cccc00	#ffff00
#green: 339933	#66cc66	#99ff99
#blue: #333399	#6666cc	#9999ff
treex = ET.parse('alz_p0405.svg')
rootx = treex.getroot()

count = 0
for child in rootx:
  for grandchild in child:
    grandchild.attrib['class'] = 'cls-2'
    x = grandchild.attrib['id']
    print(x, count)
    for value in alz.index.values:
      if x in value:
        #v = alz.filter(like=x, axis=0)['Wand Count'].values[0]
        v = count
        grandchild.attrib['style'] = "fill: rgb({},{},{})".format(v**1.5,0,0)
    count += 1


treex.write('alz0405_inf_rgb_exp_scale.xml')

for child in rootx:
  for grandchild in child:
    print(grandchild.attrib)

for child in rootx:
  for grandchild in child:
    grandchild.attrib['class'] = 'color'
    x = grandchild.attrib['id']
    print(x)
    for value in alz.index.values:
      if x in value:
        v = alz.filter(like=x, axis=0)['Wand Count'].values[0]
        if v <= 5:
          grandchild.attrib['style'] = "fill:blue"
        elif v <= 25:
          grandchild.attrib['style'] = "fill:yellow"
        else:
          grandchild.attrib['style'] = "fill:red"

treex.write('alz0405_inf.xml')

import xml.etree.ElementTree as ET
treex = ET.parse('alz_p0405.svg')
rootx = treex.getroot()

count = 0
for child in rootx:
  print(count, ': ', child.attrib)
  for grandchild in child:
    #print(grandchild.attrib)
    grandchild.attrib['class'] = 'color'
    if(count % 2 == 0):
      grandchild.attrib['style'] = "fill:blue"
    else:
      grandchild.attrib['style'] = "fill:green"
    print(grandchild.attrib)
    count += 1

treex.write('alz0405_blue_green.xml')

df[df['activity_id']=="AFG_P2223"]

import glob
svgs = glob.glob('*.svg')

svgs

"""Heat Map for ALZ SVGs"""

import xml.etree.ElementTree as ET
for svg in svgs:
  treex = ET.parse(svg)
  rootx = treex.getroot()

  for child in rootx:
    if child.attrib != {}:
      if child.attrib['id'] == 'labels':
        for grandchild in child:
          x = grandchild.attrib['id']
          print(x)
          grandchild.attrib['class'] = 'cls-2'
          for value in alz.index.values:
            if x in value:
              v = alz.filter(like=x, axis=0)['Wand Count'].values[0]
              grandchild.attrib['style'] = "fill: rgb({},{},{})".format(v**1.5,0,0)

  rgb = 'opg1_red_rgb_' + svg
  treex.write(rgb)

len(rootx)
for child in rootx:
  print(child.attrib)